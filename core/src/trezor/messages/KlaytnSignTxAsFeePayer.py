# Automatically generated by pb2py
# fmt: off
import protobuf as p

if __debug__:
    try:
        from typing import List
    except ImportError:
        List = None  # type: ignore


class KlaytnSignTxAsFeePayer(p.MessageType):
    MESSAGE_WIRE_TYPE = 859

    def __init__(
        self,
        address_n: List[int] = None,
        sender: bytes = None,
        nonce: bytes = None,
        gas_price: bytes = None,
        gas_limit: bytes = None,
        tx_type: bytes = None,
        value: bytes = None,
        data_initial_chunk: bytes = None,
        data_length: int = None,
        code_format: int = None,
        chain_id: int = None,
        fee_ratio: int = None,
        to: str = None,
        human_readable: bool = None,
    ) -> None:
        self.address_n = address_n if address_n is not None else []
        self.sender = sender
        self.nonce = nonce
        self.gas_price = gas_price
        self.gas_limit = gas_limit
        self.tx_type = tx_type
        self.value = value
        self.data_initial_chunk = data_initial_chunk
        self.data_length = data_length
        self.code_format = code_format
        self.chain_id = chain_id
        self.fee_ratio = fee_ratio
        self.to = to
        self.human_readable = human_readable

    @classmethod
    def get_fields(cls):
        return {
            1: ('address_n', p.UVarintType, p.FLAG_REPEATED),
            2: ('sender', p.BytesType, 0),
            3: ('nonce', p.BytesType, 0),
            4: ('gas_price', p.BytesType, 0),
            5: ('gas_limit', p.BytesType, 0),
            6: ('tx_type', p.BytesType, 0),
            7: ('value', p.BytesType, 0),
            8: ('data_initial_chunk', p.BytesType, 0),
            9: ('data_length', p.UVarintType, 0),
            10: ('code_format', p.UVarintType, 0),
            11: ('chain_id', p.UVarintType, 0),
            12: ('fee_ratio', p.UVarintType, 0),
            13: ('to', p.UnicodeType, 0),
            14: ('human_readable', p.BoolType, 0),
        }
